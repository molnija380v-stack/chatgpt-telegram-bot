import os
import asyncio
import nest_asyncio
from datetime import datetime
from telegram import Bot
from telegram.ext import Application, CommandHandler
from openai import OpenAI

# –ß—Ç–æ–±—ã Render –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ event loop
nest_asyncio.apply()

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# === –ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) ===
CHANNEL_ID = -1002971665440

# === Telegram –∏ OpenAI –∫–ª–∏–µ–Ω—Ç—ã ===
application = Application.builder().token(BOT_TOKEN).build()
bot = Bot(token=BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)


# ======= –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ =======
async def generate_text():
    prompt = (
        "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ –±–µ–ª–æ-—Å–µ—Ä—ã—Ö —Å—Ö–µ–º–∞—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞ "
        "–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –°—Ç–∏–ª—å ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, "
        "—Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –î–æ–±–∞–≤—å 1 —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–º—É."
    )
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=80,
    )
    return response.choices[0].message.content.strip()


# ======= –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ =======
async def generate_image():
    try:
        response = client.images.generate(
            model="gpt-image-1",
            prompt="–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò, –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, —Å —Å–µ—Ä–æ-–±–µ–ª–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π",
            size="1024x1024"
        )
        return response.data[0].url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        return None


# ======= –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ =======
async def autopost():
    while True:
        try:
            text = await generate_text()
            image = await generate_image()

            if image:
                await bot.send_photo(chat_id=CHANNEL_ID, photo=image, caption=text)
            else:
                await bot.send_message(chat_id=CHANNEL_ID, text=text)

            print(f"[{datetime.now()}] –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ: {e}")

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
        await asyncio.sleep(3 * 60 * 60)


# ======= –ö–æ–º–∞–Ω–¥—ã =======
async def start(update, context):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø–æ—Å—Ç–∏—Ç—å!")


async def post(update, context):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /post"""
    try:
        text = await generate_text()
        image = await generate_image()

        if image:
            await bot.send_photo(chat_id=CHANNEL_ID, photo=image, caption=text)
        else:
            await bot.send_message(chat_id=CHANNEL_ID, text=text)

        await update.message.reply_text("üì® –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


# ======= –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ =======
async def main():
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("post", post))

    # –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(autopost())

    # –ó–∞–ø—É—Å–∫
    await application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())
